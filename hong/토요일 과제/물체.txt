다형성과 공장 패턴
스마트 포인터 알아보기


공장 패턴으로 코드 간단하게 하게 하기

부모 클래스에서 
자식에 있는 함수를 사용하고 싶다고 생각하면 자식의 포인터를 선언 해서 리턴을 해줘야 한다고 생각하지만
다형성을 사용하고 있을 때에는 부모의 클래스의 포인터를 선언해서 사용하면 된다.

헤더  x
cpp
ex) 부모 * 자식 함수(매개변수);
{
	return new 함수(매개변수);
}
이렇게 선언 하고

#include "자식 헤더"

이제 메인에서 

부모의 헤더 파일을 선언하고
.push_back(부모클래스 :: 함수(매개변수));


---------------------------------------------------------------------------
싱글톤

private 생성자에서 자기 자신을 포인터 변수로 저장을 한 다음에
public에서 자기 자신의 주소를 변수로 저장한 다음에
다른 파일에서 주소로 접근을 하면된다.

ex)
헤더
private:
	static 클래스 * instance;
public:
	static 클래스 * getsound();
		      private 에서 선언된 instance에 접근을 하기위해서 사용

메인에서
클래스 객체를 선언 할수 없다 이유는 생성자가 private에 선언이 되어있기 때문에 접근 불가

사용을 할려면
auto & 변수 = *클래스::getsound()으로 접근을 해서 사용하면 할 수 있다.
( * 변수 = 클래스::getsound()으로도 사용이 가능하다.)
주소로 저장을 했기 때문에 주소로 접근이 가능

정의
클래스 * 클래스 :: instance = nullptr;
클래스 * 클래스 :: getsound()
{
	if(instance == nullptr)
	//만약 없으면 
	{
		instaance = new 클래스();
		//새로 만들어라
	}
	return instance;
	원래 가지고 있던것을 가져가라
}

다른 파일에서도 사용 할때 
	클래스::getsound()선언해도 같은 주소를 가리키고 있기 때문에 문제가 없다

전반적을 사용이 되야하는것






























