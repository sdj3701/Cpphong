vector 벡터는 크기와 방향을 갖는 물리량
Scala 스칼라는 크기만 갖는 물리량을 의미한다.

vector 법칙
벡터의 덧셈
a= 3,5 b= 2,-1 c=a+b
벡터의 뺄셈 
- c = b-a

내적 외적
내적 - 내적 연산은 두 벡터를 받아 스칼라를 반환 이 스칼라는 두 벡터의 크기를 곱하고 그 결과에
 두 벡터 사이의 각에 대한 코사인을 곱한 것과 같다.
두 벡터 모두 노멀라이즈 벡터일 경우 코사인은 근본적으로 첫 번째 벡터가  두번째 벡터의 방향으로 
얼마나 기울었는지 나타냄
내적은 스칼라2D

외적 - 다른 연산은 2D 및 3D 벡터용으로 정의되어 있으며 실제로 어떤 차원의 벡터에서도 가능합니다.
반면 외적은 3D 벡터에서만 의미가 있습니다. 외적 연산은 두 벡터를 입력으로 받아 결과물로 다른 벡터를
반환합니다.
입력 벡터들의 크기를 곱하고 그 결과에 두 벡터 사이각의 사인을 곱한 것과 같습니다.


normal vector
노멀 벡터(즉, 평면에 수직인 벡터)는 메시 생성 중에 자주 필요하며 경로 추적 및 다른 상황에서도 유용함
평면의 세 점이 주어질 경우, 노멀을 쉽게 찾을 수 있습니다.
세 점 중 아무 점이나 하나 선택하고, 이 점을 다른 두 점에서 각각 빼면 두 개의 벡터를 구할 수 있습니다.
수직으로 뻗어 나오는 벡터

게임에서의 내적과 외적은 어떻게 사용될까? 

내적을 이용해서 물체가 앞에 있는지, 뒤에 있는지 판별
플레이어의 시선을 중심으로 좌우 90도가 넘어가는 순간 코사인 값은 음수를 가지기 때문에 후면에 있음

외적은 좌우를 반별할때 사용된다
외적은 우선 내적과 다르게 스칼라 값이 아닌 벡터 값이므로 방향성을 가지고 있어 플레이어의 기준으로 양수는 왼쪽
음수는 오른쪽을 가지고 있다


1. 스레드 프로세스 등에 대한 정리
스레드	- 스레드는 어떤한 프로그램 내에서, 특히 프로세스 내에서 실행되는 흐름의 단위를 말함
	- 프로세스가 할당받은 자원을 이용하는 실행 흐름의 단위
	- 하나의 프로세스 내에서 더 작은 단위들로 각각 독립적으로 실행되며, 각각 제어가 가능한 흐름
	- 하나의 프로세스 내에서 여러 개의 실행 흐름을 두어 작업을 효율적으로 처리하기 위한 모델

- 프로세스가 할당 받은 자원을 이용한 실행 흐름
  각각 독립적으로 실행 되면 각각제어가 가능 그러므로 작업이 효율적으로 처리하기 위한 모델

프로세스	- 프로세스는 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램을 말함
	- 운영체제로 부터 자원을 할당받은 작업의 단위
	- 단순히 실행 중인 프로그램
	- 완전한 하나의 프로그램이 실행되는 것
	- 영역을 공유 하지 않음

- 프로그램이 실행되서 돌아가는 상태 즉 컴퓨터가 어떤 일을 하고 있는 상태를 프로세스라고 한다. 
 단순히 실행 중인 프로그램 운영체제로 부터 자원을 할당 받은 작업하며 영역을 공유 하지 않음

스레드에서 주의 해야 할 점
- 어느 한 스레드가 제어상에 문제가 발생하면, 타 스레드 메모리 공간을 덮어쓸 수도 있기 때문에 안전성에 다소 취약


-코루틴에 대한 정리
- 코루틴을 사용 하면 작업을 다수의 프레임에 분산할 수 있다.
유니티에서 코루틴은 실행을 일시 정지하고 제어를 유니티에 반환 하지만 중단한 부분에서 다음 프레임을 계속할 수 있는 메서드
- 계속해서 확인이 필요한 작업에서 업데이트 문에서 반복적으로 확인하면 데이터를 많이 사용하므로 코루틴을 사용하여 
데이터를 관리해주는 장점이 있다.

스레드와 코루틴 차이점
스레드는 동시에 여러개의 일을 처리하고(선점형)
코루틴은 일을 나누어 하나씩 처리함(비선점형)


 