싱글톤 패턴이란
- 여러 디자인 패턴 종류 중 하나로, 하나의 클래스에 오직 하나의 객체 인스턴스만 가지는 패턴이다.

디자인 패턴: 프로그램을 설계할 때 발생했던 문제점들을 객체 간 상호관계 등을 통해 해결할 수 있도록
하나의 규약 형태로 만들어 놓은 것

- 하나의 인스턴스를 만들어 놓고 해당 인스턴스를 다른 모듈들이 어디에서든 공유하며 접근, 사용할 수 있다.
- 싱글톤 패턴으로 만들어진 클래스는 생성자가 여러번 호출 되더라도, 실제로 생성되는 객체는 하나이고 최초
생성 이후에 호출된 생성자는 최초의 생성자가 생성한 객체를 보낸다.

싱글톤 패턴의 장점
-인스턴스가 단 하나이기 때문에 인스턴스를 생성할때 드는 비용이 줄어든다
- static을 사용하여 별도의 메모리 영역을 얻을면서 한번의 new 연산자로 인스턴스를 사용하기 때문에
메모리 낭비를 방지할 수 있다.
- 싱글톤 패턴으로 만들어진 클래스의 인스턴스는 전역 인스턴스이기 때문에 다른 클래스의 인스턴스들이
데이터를 공유할 수 있다.

단점
- 싱글톤 인스턴스를 여러곳에서 많이 공율할 경우 다른 클래스의 인스턴스 간 의존성이 높아질 수 있다.
- 의존성이 높아지면 수정 작업이나 테스트를 진행하기 어려워 진다.
- 멀티스레드 환경에서 객체가 1개 이상 생성되어 오류 발생의 여지가 있음

static GameMgr instance = null
void Awake()
{
	if(instance == null)
	instance = this;
	//이 클래스 인스턴스가 탄생했을 때 전역 변수 instance에 게임메니저 인스턴스가 담겨있지 않다면 자신을 넣어줌
	DontDestroyOnLoad(this.gameObject)
	//씬이 전환이 되더라도 파괴되지 않는다는 함수()
	else
	Destroy(this.gameObject);
	//존재 하면 이미 전역변수인 instance에 인스턴스가 존재한다면 자신을 삭제한다.
}

public static GameMgr Instance
{
	get{if(instance == null) {return null;} return instance;}
	//게임 매니저 인스턴스에 접근할 수 있는 프로퍼티. static이므로 다른 클래스에서 맘껏 호출할 수 있다.
}
public void PauseGame()
{
 	Time.timeScale = 0.0f;
	//시간을 멈추는 자
}


//다른 클래스

public void OnclickBtnPause()
{
	GameMgr.Instance.PauseGame();
	//pause 버튼을 누르면 게임 일시 정지
}

책
- 유일성을 보장하는 것이다, 클래스가 싱글턴 패턴을 제대로 구현했다면 초기화된 후에는 런타임 동안 메모리에
오직 하나의 인스턴스만 존재한다는 것을 의미한다. 이 메커니즘은 일관되고 유일한 진입점에서 전역전으로 접근할
수 있는 시스템을 관리하는 클래스가 있을 때 도움이 된다.
싱글턴 디자인은 매우 단순핟, 싱글턴 클래스를 구현할 때  오직 한번만 메모리 안에 생성되어야 한다.
자기 자신과 같은 유형의 개체 인스턴스를 발견하면 즉시 없앤다. 상당히 엄격하며 어떤 경쟁도 용납하지 않는다

싱글턴의 장점
전역 접근 가능 
- 싱글턴 패턴을 사용하여 리소스나 서비스의 전역 접근점을 만들 수 있다.
동시성 제어
- 공유 자원에 동시 접근을 제한하고자 사용할 수 있다.

유닛 테스트
- 싱글턴을 과도하게 사용하면 유닛 단위의 테스트가 어렵다.
싱글턴 오브젝트가 다른 싱글턴에 종속될 수 있다. 하나가 누락되면 종속성이 끊어진다.
이문제는 퍼사드와 싱글턴을 결합하여 핵심 시스템에 대한 전면 인터페이스를 설정할 때 자주 발생한다.
우리는 각 클래스가 동작하고자 서로 의존하면서 게임의 특정 핵심 구성 요소를 관리하는 매니저 클래스의
배열로 완성했다. 단독으로 테스트하고 디버그하는 것은 불가능하다.

잘못된 습관
- 싱글턴은 사용하기 쉬워 잘못된 프로그래밍 습관이 생길 수 있다. 싱글턴으로 어디서나 모든 것에 쉽게
접근하게 만들 수 있기 때문에, 코드 작성 시 보다 정교하게 접근하여 테스트하는 것이 귀찮게 느껴질 수 있다.

게임 매니저 구현






