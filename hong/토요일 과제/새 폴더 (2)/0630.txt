// WinAPP_Proj.cpp : 애플리케이션에 대한 진입점을 정의합니다.
//
#define  _CRT_SECURE_NO_WARNINGS
#include "framework.h"
#include "WinAPP_Proj.h"
#include "CObject.h"
#include <math.h>
#include <vector>

#define MAX_LOADSTRING 100
#define PI 3.141592

#define degreeToRadian(degree)((degree)*PI/180)


using namespace std;

// 전역 변수:
HINSTANCE hInst;                                // 현재 인스턴스입니다.
WCHAR szTitle[MAX_LOADSTRING];                  // 제목 표시줄 텍스트입니다.
WCHAR szWindowClass[MAX_LOADSTRING];            // 기본 창 클래스 이름입니다.

// 이 코드 모듈에 포함된 함수의 선언을 전달합니다:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
    _In_opt_ HINSTANCE hPrevInstance,
    _In_ LPWSTR    lpCmdLine,
    _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: 여기에 코드를 입력합니다.

    // 전역 문자열을 초기화합니다.
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_WINAPPPROJ, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // 애플리케이션 초기화를 수행합니다:
    if (!InitInstance(hInstance, nCmdShow))
    {
        return FALSE;
    }

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_WINAPPPROJ));

    MSG msg;

    // 기본 메시지 루프입니다:
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int)msg.wParam;
}



//
//  함수: MyRegisterClass()
//
//  용도: 창 클래스를 등록합니다.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc = WndProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_WINAPPPROJ));
    wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1); //숫자를 바꾸면 색이 변한다
    wcex.lpszMenuName = MAKEINTRESOURCEW(IDC_WINAPPPROJ);
    wcex.lpszClassName = szWindowClass;
    wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   함수: InitInstance(HINSTANCE, int)
//
//   용도: 인스턴스 핸들을 저장하고 주 창을 만듭니다.
//
//   주석:
//
//        이 함수를 통해 인스턴스 핸들을 전역 변수에 저장하고
//        주 프로그램 창을 만든 다음 표시합니다.
//

const int circleRadius = 40;//원의 크기 랜덤으로 재정의 해야함
bool bFlag = false;

void DrawCircle(HDC hdc, POINT pt, BOOL bFlag);


BOOL InitInstance(HINSTANCE hInstance, int nCmdShow) //여기서 윈도우 창을 설정 변경을 해주면 된다
{
    hInst = hInstance; // 인스턴스 핸들을 전역 변수에 저장합니다.

    HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW, // WS_OVERLAPPEDWINDOW | WS_VSCROLL 을 추가면 스크롤이 생김
        200, 300, 1024, 768, nullptr, nullptr, hInstance, nullptr);

    if (!hWnd)
    {
        return FALSE;
    }

    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    return TRUE;
}

#define TIMER_1 1

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    PAINTSTRUCT ps;
    HDC hdc;
    static RECT viewRect;
    static POINT ptMouse;
    static vector <CObject*> c;
    static int Speed = 1;
    static int Direction= 1;

    switch (message)
    {
    case WM_CREATE:
    {
        SetTimer(hWnd, TIMER_1, 100, NULL);
    }
    break;

    case WM_TIMER:// 잘 모르겠음?!?!?!?
    {
        if (wParam == TIMER_1 && !c.empty())
        {
            for (int i = 0; i < c.size(); i++)
            {
                c[i]->Update();
            }
        }
        
        InvalidateRgn(hWnd, NULL, TRUE);
    }
    break;

    case WM_KEYDOWN://키보드 누르면
    {
    
    }
    break;

    case WM_KEYUP:
    {

    }
    break;

    case WM_COMMAND:
    {
        int wmId = LOWORD(wParam);
        // 메뉴 선택을 구문 분석합니다:
        switch (wmId)
        {
        case IDM_ABOUT:
            DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
            break;
        case IDM_EXIT:
            DestroyWindow(hWnd);
            break;
        default:
            return DefWindowProc(hWnd, message, wParam, lParam);
        }
    }
    break;
    case WM_LBUTTONDOWN:// 마우스 누르기 
    {
        ptMouse.x = LOWORD(lParam);
        ptMouse.y = HIWORD(lParam);
        c.push_back(new CCircle(ptMouse,50));

        InvalidateRect(hWnd, NULL, TRUE);
    }
    break;
    case WM_LBUTTONUP:
    {

    }
    break;

    case WM_MOUSEMOVE:
    {

    }
    break;
    case WM_PAINT:
    {
        // TODO: 여기에 hdc를 사용하는 그리기 코드를 추가합니다...
        hdc = BeginPaint(hWnd, &ps);
        if (!c.empty())
        {
            for (int i = 0; i < c.size(); i++)
            {
                c[i]->Draw(hdc);
            }

        }
        
        EndPaint(hWnd, &ps);
    }
    break;

    case WM_DESTROY:
    {
        KillTimer(hWnd, 1);
        PostQuitMessage(0);
    }
    break;

    default:
        
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// 정보 대화 상자의 메시지 처리기입니다.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}

//template<class T>
//void DrawGrid(HDC hdc, POINT center, T width, T height, int count)
//{
//    POINT start = { center.x - width / 2 , center.y - height / 2 };
//    POINT end = { center.x + width / 2 , center.y + height / 2 };
//
//
//    T xInterval = width / count;
//    T yInterval = height / count;
//
//    for (int i = 0; i < count + 1; i++)
//    {
//        MoveToEx(hdc, start.x + xInterval * i, start.y, NULL);
//        LineTo(hdc, start.x + xInterval * i, end.y);
//    }
//
//    for (int i = 0; i < count + 1; i++)
//    {
//        MoveToEx(hdc, start.x, start.y + yInterval * i, NULL);
//        LineTo(hdc, end.x, start.y + yInterval * i);
//    }
//
//
//}
//
void DrawCircle(HDC hdc, POINT pt, BOOL bFlag)
{

    if (bFlag)
        SelectObject(hdc, GetStockObject(LTGRAY_BRUSH));
    Ellipse(hdc, pt.x - circleRadius, pt.y - circleRadius, pt.x + circleRadius, pt.y + circleRadius);

}
//
//void CenterRectangle(HDC hdc, POINT center, float width, float height)
//{
//    POINT start = { center.x - width / 2 , center.y - height / 2 };
//    POINT end = { center.x + width / 2 , center.y + height / 2 };
//
//    Rectangle(hdc, start.x, start.y, end.x, end.y);
//}

/*
키 입력
원 움직이기

마우스 안됨

*/