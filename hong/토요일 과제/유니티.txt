스크립팅 환경 설정

스크립팅 개념
- 코루틴 코루틴을 사용하면 작업을 다수의 프레임에 분산할 수 있습니다. 
유니티에서 코루틴은 실행을 일시 정지하고 제어를 유니티에 반환하지만 중단한 부분에서 다음 프레임을
계속할 수 있는 메서드입니다.

중요 클래스
GameObject
게임 오브젝트는 unity의 씬을 위한 빌딩 블록이며, 게임 오브젝트의 모양과 게임 오브젝트의 기능을 결정하는 기능적
컴포넌트의 컨테이너 역할을 합니다.

스크립팅에서 GameObject 클래스는 
GameObject 찾기, 연결 만들기 및 메시지 전송, GameObject에 연결된 구성 요소 추가 또는 제거,
해당 상태와 관련된 값 설정을 포함하여 코드에서 작업할 수 있는 메서드 모음을 제공

프로퍼티는 일부 객체 지향 프로그래밍 언어에서 테이터 멤버와 메소드 간 기능의 중간인 클래스 멤버의 특수한
유형이다. 프로퍼티의 읽디와 쓰기는 일반적으로 getter and sertter 메소드 호출로 변환된다.

씬 상태 프로퍼티
활성 상태
게임 오브젝트 이름 왼쪽의 체크 박스로 표시되며, 
GameObject.SetActive를 사용하여 제어할 수 있습니다.
-ex) 몬스터가 죽으면 오브젝트를 꺼서 기능 자체를 못하게 막는 방법

GameObject.activeSelf는 게임오브젝트의 현재 활성 상태를 읽는 데 사용할 수도 있습니다.
로컬 활성 상태를(읽기 전용)
설정이 된 이 gameObject의 로컬 활성 상태를 반화 합니다. 
true를 반환하더라도 부모가 활성화되지 않았기 때문에 GameObject가 비활성화될 수 있습니다.

GameObject.activeInHierarchy는 게임오브젝트가 장면에서 실제로 활성화되어 있는지 여부를 읽는 데 사용합니다.
게임에서 활성 같애인지 여부를 알 수 있다. 
GameObject.activeSelf속성과 모든 부모의 속성이 활성화된 경우에 해당합니다.
GameObject.activeSelf와 달리 부모 게임 오브젝트가 게임 오브젝트의 현재 활성 상태에 영향을 주는지 여부도 확인합니다.


정적 상태
전역 조명 , 오클루전 , 배칭 , 내비게이션, 반사 프로브와 같은 일부 Unity 시스템은 게임 오브젝트의 정적 상태에 의존합니다.

정적 게임 오브젝트 
만약 게임 오브젝트 런타임에 움직이지 않으면 정적 GameObject로 알려져 있습니다. GameObject가 런타임에 이동하는 경우 이를 동적 게임오브젝트 라고 한다

태그 및 레이어
태그는 씬에서 게임 오브젝트 타입을 표시 및 식별하는 방식을 제공하고
레이어는 렌더링 또는 물리 충돌 같은 특정 빌트인 동작에 게임 오브젝트 그룹을 포함하거나 제외하는 유사하면서도 차별화된 방식을 제공합니다.

GameObject.tag 및 속성을 사용하여 스크립트를 통해 태그 및 레이어 값을 수정할 수 있습니다.
GameObject.layer.compareTag 또한 태그가 존재하는지 확인하고 메모리 할당을 유발하지 않는 메서드를 사용하여 GameObject의 태그를 효율적으로 확인할 수 있습니다.

컴포넌트 추가 및 제거 
런타임 시점에 컴포넌트를 추가하거나 제거할 수 있으며, 이는 게임 오브젝트를 절차적으로 생성하거나 게임 오브젝트의 동작 방식을 수정할 때 유용합니다. 
손상을 일으키지 않고 스크립트를 통해 스크립트 컴포넌트와 일부 타입의 빌트인 컴포넌트를 enable 또는 disable 상태로 만들 수 있습니다.

런타임 시점에 컴포넌트를 추가하는 가장 좋은 방법은AddCompnent<Type>를 사용하여 여기에 보이는 것처럼 컴포넌트 타입을 꺾쇠 괄호 안에 지정하는 것입니다.
컴포넌트를 제거하려면 컴포넌트 자체에 대한 Object.Destroy 메서드를 사용해야 합니다.

컴포넌트 액세스
가장 간단한 예로는 게임 오브젝트의 스크립트가 동일한 게임 오브젝트에 연결된 다른 컴포넌트에 액세스해야 하는 겨우를 들 수 있습니다. 
이때 GetComponent 메서드가 사용돕니다. 일반적으로 컴포넌트 오브젝트를 변수에 할당해야 한다

인스펙터에서 게임 오브젝트를 변수에 연결
관련된 게임 오브젝트를 찾는 가장 간단한 방법은 public GameObject 변수를 스크립트에 추가하는 것
public GameObject stove;

Getcomponent 함수와 컴포넌트 액세스 변수는 다른 요소와 마찬가지로 이 오브젝트에 이용할 수 있습니다.

자식 게임 오브젝트 찾기

경우에 따라 게임 씬은 수집품,웨이포인트 및 장애물과 동일한 유형의 다수의 게임 오브젝트를 사용합니다,
예로 들어 경로 찾기 스크립트에서 모든 웨이포인트를 사용할 수있어야함.
변수를 사용하여 이러한 게임 오브젝트를 연결하는 것은 가능하지만 각각의 새 웨이포인트를 스크립트의 변수로 드래그해야 하는 경우가 생김
자식 GameObject는 부모의 Transform구성 요소를 사용하여 검색할 수 있습니다.
using UnityEngine;

public class WaypointManager : MonoBehaviour {
    public Transform[] waypoints;

    void Start()
    {
        waypoints = new Transform[transform.childCount];
        int i = 0;

        foreach (Transform t in transform)
        {
            waypoints[i++] = t;
        }
    }
}
또한 Transform.Find 메서드를 사용하여 이름별로 특정 자식 오브젝트를 찾을 수 있습니다.
transform.Find("이름");

메시지 전송 및 브로드 캐스트
프로젝트를 편집하는 동안 인스펙턴에서 게임 오브젝트 사이의 참조를 설정할 수 있습니다. 
그러나 미리 설정하는 것이 불가능 할 수 도있습니다.
BrodcasrMessage를 사용하면 해당 메서드를 구현해야 하는 위치를 구체적으로 지정하지 않고도 명명된 메서드를 호출할 수 있습니다.

SendMessage는 좀더 특정적이며, 게임 오브젝트 자체에 대해 명명된 메서드만 호출

SendMessageUpwards는 다소 유사하지만 , 게임 오브젝트와 모든 해당 부모에 대해 명명된 메서드를 호출

이름이나 태그로 게임 오브젝트 찾기
게임 오브젝트를 식별할 수 있는 정보가 있는 한 장면 계층 구조의 어느 곳에서나 게임오브젝트를 찾을 수 있습니다.
개별 개체는 GameObject.Finr 함수를 사용하여 이름으로 검색할 수 있습니다.
GameObject player;

player = GameObject.Finr("이름");

MonoBehaviour 클래스는 기본적으로 모든 Unity 스크립트가 파생되는 기본 클래스입니다.
Unity의 프로젝트 창에서 C# 스크립트를 생성하면 MonoBehaviour에서 자동으로 상속되며,템플릿 스크립트를 제공합니다.
에디터에서 게임 오브젝트에 스크립트를 연결할 수 있는 프레임워크를 제공할 뿐만 아니라,시작 및 업데이트 등과 같은 유용한 이벤트에 대한 연결을 제공합니다.

코루틴
MonoBehaviour 클래스를 사용하면 코루틴을 시작, 중지 및 관리할 수 있습니다.
이는 특정 시간 동안 기다리거나 특정 작업이 완료될 때까지 기다리면서 다른 코드가 계속 실행되도록 해주는 비동기 코드 작성 방식

이벤트
MonoBehaviour 클래스는 대규모 이벤트 메시지 컬렉션에 대한 액세스를 제공하며, 이를 통래 현재 프로젝트에서 발생하는 상황에 따라 코드를 실행할수 있습니다.
Start - 게임 오브젝트가 존재 하기 시작할 때 호출됩니다.
Update - 프레임마다 호출됩니다.				매 프레임마다 호출
FixedUpdate - 물리 타임스텝마다 호출됩니다.			0.02일정 시간에 호출
OnBecameVisible 및 OnBecameInvisible 게임 오브젝트의 렌더러가 카메라의 뷰에 들어오거나 나갈 때 호출됩니다.
OnCollisionEnter 및 OnTriggerEnter 물리 충돌 또는 트리거가 발생할 때 호출됩니다.

Transform
Transform 클래스는 스크립트를 통한 게임 오브젝트의 포지션, 회전 및 스케일뿐만 아니라 부모 및 자식 게임 오브젝트의 계층적 관계에 대한 다양한 작업 방법을 제공합니다.

Quaternion
유니티는 Quaternion 클래스를 사용하여 게임 오브젝트의 3차원 방향을 저장하고, 이를 통해 한 방향에서 다른 방향으로의 상대 회전을 설명합니다.
회전 생성 
Quaternion.LookRotation
Quaternion.Angle
Quaternion.AngleAxis
Quaternion.FromToRotation
회전 조작
Quaternion.Slerp
Quaternion.Inverse
Quaternion.RotateTowards

Transform 클래스도 쿼터니언 회전에 사용할 수 있는 다음의 메서드를 제공합니다.
Transform.Rotate 및 Transform.RotateAround

ScriptableObject
ScriptableObject는 클래스 인스턴스와는 별도로 대량의 데이터를 저장하는 데 사용할 수있는 데이터 컨테이너입니다.
ScriptableObject의 주요 사용 사례중 하나는 값의 사본이 생성되는 것을 방지하여 프로젝트의 메모리 사용을 줄이는 것입니다.
이는 연결된 MonoBehaviour 스크립트에 변경되지 않는 데이터를 저정하는 프리팹이 있는 프로젝트의 경우 유용합니다.

사용 예
[CreateAssetMenu(fileName = "Data", menuName = "ScriptableObject/SpawnManagerScriptableObject",other =1)]
public class SpawnManagerScriptableObject : ScriptableObject
{
	//생성할 프리팹의 이름을 저장하는 문자열 변수
	public string prefabName;

	//생성할 프리팹의 개수를 저장하는 정수 변수
	public int numberOfPrefabsToCreate;

	//프리팹들을 생성할 위치를 저장하는 Vector3 배열 변수
	public Vector3[] spawnPoints;
}

public class Spawner : MonoBehaviour
{
    // 생성할 게임 오브젝트 프리팹.
    public GameObject entityToSpawn;

    // 위에서 정의한 스크립터블 오브젝트의 인스턴스.
    public SpawnManagerScriptableObject spawnManagerValues;

    // 생성한 오브젝트의 이름에 추가될 숫자. 각 오브젝트마다 숫자가 증가합니다.
    int instanceNumber = 1;

    void Start()
    {
        // 게임 오브젝트 생성 시작.
        SpawnEntities();
    }

    void SpawnEntities()
    {
        // 현재 스폰 위치 인덱스.
        int currentSpawnPointIndex = 0;

        // 정해진 프리팹을 지정된 스폰 포인트 위치에 생성합니다.
        for (int i = 0; i < spawnManagerValues.numberOfPrefabsToCreate; i++)
        {
            // 프리팹의 인스턴스를 현재 스폰 위치에 생성합니다.
            GameObject currentEntity = Instantiate(entityToSpawn, spawnManagerValues.spawnPoints[currentSpawnPointIndex], Quaternion.identity);

            // 생성된 오브젝트의 이름을 ScriptableObject에 정의된 문자열에 유니크한 숫자를 붙여 설정합니다.
            currentEntity.name = spawnManagerValues.prefabName + instanceNumber;

            // 다음 스폰 위치 인덱스로 이동합니다. 스폰 포인트 배열을 벗어날 경우 처음 위치로 돌아갑니다.
            currentSpawnPointIndex = (currentSpawnPointIndex + 1) % spawnManagerValues.spawnPoints.Length;

            // 유니크한 숫자를 증가시킵니다.
            instanceNumber++;
        }
    }
}

Time
Time.time은 프로젝트 재생 시작 후 경과한 시간 초 단위로 반환합니다.
Time.deltaTime은 마지막 프레임이 완료된 후 경과한 시간을 초 단위로 반환합니다. 이 값은 게임이나 앱이 실행될 때 초당 프레임속도에 따라 다릅니다.
Time.timeScale은 시간이 경과하는 속도를 제어합니다. 이를 통해 슬로우 모션 효과를 생성 가능
Time.fixedDeltaTiem은 유니티 고정 타임스텝 루프 간격을 제어합니다.
Time.maxinumDeltaTime은 엔진이 위의 delta time 프로퍼티를 통과한 것으로 보고 하는 시간의 양에 상한을 설정합니다.




































